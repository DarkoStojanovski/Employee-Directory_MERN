{"version":3,"sources":["logo.svg","components/header.js","components/table.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Table","props","class","scope","employees","map","e","console","log","src","picture","thumbnail","name","first","email","Body","useState","setEmployees","filterEmployees","setFilterEmployees","useEffect","axios","then","res","data","results","onChange","event","target","value","selctedEmployees","filter","employee","toLowerCase","includes","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,2ICgB5BC,G,kBAZA,WACX,OAEI,6BACI,qDCgCGC,G,MArCD,SAACC,GAEf,OACI,6BACI,2BAAOC,MAAM,SACnB,+BACE,4BACE,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGJ,+BAEGF,EAAMG,WAAaH,EAAMG,UAAUC,KAAI,SAACC,GAEvC,OADAC,QAAQC,IAAIF,GAEV,4BACE,wBAAIH,MAAM,OAAM,yBAAKM,IAAMH,EAAEI,QAAQC,aACrC,gCAAML,EAAEM,KAAKC,OACb,gCAAMP,EAAEQ,gB,gCCmDHC,EAnEF,WAAO,IAAD,EACmBC,mBAAU,IAD7B,mBACRZ,EADQ,KACGa,EADH,OAE+BD,mBAAU,IAFzC,mBAERE,EAFQ,KAESC,EAFT,KAwBfC,qBAAU,WACNC,IAAM,yCAELC,MAAK,SAACC,GAENhB,QAAQC,IAAIe,GACZN,EAAaM,EAAIC,KAAKC,SAEtBN,EAAmBI,EAAIC,KAAKC,cAO/B,IAeF,OACA,6BACI,2BAAQC,SAfS,SAACC,GAEd,GADJpB,QAAQC,IAAImB,EAAMC,OAAOC,OACK,KAAtBF,EAAMC,OAAOC,MAAjB,CAIJ,IAAMC,EAAmBZ,EAAgBa,QAAO,SAACC,GAC7C,OAAQA,EAASpB,KAAKC,MAAMoB,cAAcC,SAASP,EAAMC,OAAOC,MAAMI,kBAG1Ed,EAAmBW,QAPVX,EAAmBf,MAa5B,kBAAC,EAAD,CAAOA,UAAac,MCjDbiB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.26d146ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\n\n\nconst Header = () => {\n    return (\n\n        <div>\n            <h1>Employee Directory</h1>\n\n        </div>\n    )\n\n\n}\n\nexport default Header;","import React from \"react\";\nimport \"../styles/table.css\";\n\nconst Table = (props) => {\n\nreturn (\n    <div>\n        <table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">#</th>\n      <th scope=\"col\">First</th>\n      <th scope=\"col\">Last</th>\n      <th scope=\"col\">Handle</th>\n    </tr>\n  </thead>\n  <tbody>\n  \n    {props.employees && props.employees.map((e) => {\n      console.log(e);\n      return (\n        <tr>\n          <th scope=\"row\"><img src= {e.picture.thumbnail}/></th>\n          <td> {e.name.first}</td>\n          <td> {e.email}</td>\n        </tr>\n\n\n\n      )\n    })}\n  </tbody>\n</table>\n \n    </div>\n\n)\n\n}\n\nexport default Table;","import React, { useEffect, useState } from 'react';\nimport \"../styles/body.css\";\nimport Table from './table';\nimport axios from 'axios';\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nconst Body = () => {\n    const [employees, setEmployees] = useState ([])\n    const [filterEmployees, setFilterEmployees] = useState ([])\n\n    const testEmployees = [ {\n        name: {\n            first: 'darko',\n        },\n        email: 'darko@gmail.com',\n        picture: {\n            thumbnail: ''\n        }\n    },\n    {\n        name: {\n            first: 'lighto',\n        },\n        email: 'lighto@gmail.com',\n        picture: {\n            thumbnail: ''\n        }\n    }\n]\n\n    useEffect(() => {\n        axios('https://randomuser.me/api/?results=50')\n        // .then(res => res.json())\n        .then((res) => {\n\n         console.log(res);\n         setEmployees(res.data.results);   \n         //setEmployees(testEmployees);   \n         setFilterEmployees(res.data.results);\n         //setFilterEmployees(testEmployees);\n        })\n\n        //setEmployees(testEmployees);   \n         //setFilterEmployees(testEmployees);\n\n    },[])\n\n    const handleChange = (event) => {\n        console.log(event.target.value);\n            if (event.target.value ===''){\n                 setFilterEmployees(employees);\n                 return\n             }\n        const selctedEmployees = filterEmployees.filter((employee) => {\n            return (employee.name.first.toLowerCase().includes(event.target.value.toLowerCase()))\n\n        })\n        setFilterEmployees(selctedEmployees);\n    }\n\n    return(\n    <div>\n        <input  onChange= {handleChange}/>\n        <Table employees = {filterEmployees}/> \n\n\n    </div>\n    )\n    \n\n\n}\n\nexport default Body;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/header';\nimport Table from './components/table';\nimport Body from './components/body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Body/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}